[
    {
        "name": "InSine",
        "family": "Sine",
        "function": "1 - Math.cos(t * Math.PI / 2)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 - cos(t * PI / 2)\nEND",
            "lua": "function inSine(t)\n  return 1 - math.cos(t * math.pi / 2)\nend",
            "javascript": "function inSine(t) {\n  return 1 - Math.cos(t * Math.PI / 2);\n}",
            "csharp": "float InSine(float t) {\n  return 1 - Mathf.Cos(t * Mathf.PI / 2);\n}",
            "cpp": "float InSine(float t) {\n  return 1 - cos(t * M_PI / 2);\n}"
        }
    },
    {
        "name": "OutSine",
        "family": "Sine",
        "function": "Math.sin(t * Math.PI / 2)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← sin(t * PI / 2)\nEND",
            "lua": "function outSine(t)\n  return math.sin(t * math.pi / 2)\nend",
            "javascript": "function outSine(t) {\n  return Math.sin(t * Math.PI / 2);\n}",
            "csharp": "float OutSine(float t) {\n  return Mathf.Sin(t * Mathf.PI / 2);\n}",
            "cpp": "float OutSine(float t) {\n  return sin(t * M_PI / 2);\n}"
        }
    },
    {
        "name": "InOutSine",
        "family": "Sine",
        "function": "-0.5 * (Math.cos(Math.PI * t) - 1)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← -0.5 * (cos(PI * t) - 1)\nEND",
            "lua": "function inOutSine(t)\n  return -0.5 * (math.cos(math.pi * t) - 1)\nend",
            "javascript": "function inOutSine(t) {\n  return -0.5 * (Math.cos(Math.PI * t) - 1);\n}",
            "csharp": "float InOutSine(float t) {\n  return -0.5f * (Mathf.Cos(Mathf.PI * t) - 1);\n}",
            "cpp": "float InOutSine(float t) {\n  return -0.5 * (cos(M_PI * t) - 1);\n}"
        }
    },
    {
        "name": "InQuad",
        "family": "Quad",
        "function": "t * t",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t * t\nEND",
            "lua": "function inQuad(t)\n  return t^2\nend",
            "javascript": "function inQuad(t) {\n  return t * t;\n}",
            "csharp": "float InQuad(float t) {\n  return t * t;\n}",
            "cpp": "float InQuad(float t) {\n  return t * t;\n}"
        }
    },
    {
        "name": "OutQuad",
        "family": "Quad",
        "function": "t * (2 - t)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t * (2 - t)\nEND",
            "lua": "function outQuad(t)\n  return t * (2 - t)\nend",
            "javascript": "function outQuad(t) {\n  return t * (2 - t);\n}",
            "csharp": "float OutQuad(float t) {\n  return t * (2 - t);\n}",
            "cpp": "float OutQuad(float t) {\n  return t * (2 - t);\n}"
        }
    },
    {
        "name": "InOutQuad",
        "family": "Quad",
        "function": "(t < 0.5) ? (2 * t * t) : (1 - Math.pow(-2 * t + 2, 2) / 2)",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 2 * t * t\nELSE\n  tween ← 1 - 0.5 * (2 - t)^2\nEND",
            "lua": "function inOutQuad(t)\n  if t < 0.5 then\n    return 2 * t^2\n  else\n    return 1 - 0.5 * (2 - t)^2\n  end\nend",
            "javascript": "function inOutQuad(t) {\n  return (t < 0.5)\n    ? (2 * t * t)\n    : (1 - Math.pow(-2 * t + 2, 2) / 2);\n}",
            "csharp": "float InOutQuad(float t) {\n  return (t < 0.5f)\n    ? (2 * t * t)\n    : (1 - Mathf.Pow(-2 * t + 2, 2) / 2);\n}",
            "cpp": "float InOutQuad(float t) {\n  return (t < 0.5)\n    ? (2 * t * t)\n    : (1 - pow(-2 * t + 2, 2) / 2);\n}"
        }
    },
    {
        "name": "InCubic",
        "family": "Cubic",
        "function": "t * t * t",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t ^ 3\nEND",
            "lua": "function inCubic(t)\n  return t^3\nend",
            "javascript": "function inCubic(t) {\n  return t * t * t;\n}",
            "csharp": "float InCubic(float t) {\n  return t * t * t;\n}",
            "cpp": "float InCubic(float t) {\n  return t * t * t;\n}"
        }
    },
    {
        "name": "OutCubic",
        "family": "Cubic",
        "function": "1 - Math.pow(1 - t, 3)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 - (1 - t) ^ 3\nEND",
            "lua": "function outCubic(t)\n  return 1 - (1 - t)^3\nend",
            "javascript": "function outCubic(t) {\n  return 1 - Math.pow(1 - t, 3);\n}",
            "csharp": "float OutCubic(float t) {\n  return 1 - Mathf.Pow(1 - t, 3);\n}",
            "cpp": "float OutCubic(float t) {\n  return 1 - pow(1 - t, 3);\n}"
        }
    },
    {
        "name": "InOutCubic",
        "family": "Cubic",
        "function": "(t < 0.5) ? (4 * t * t * t) : (1 - Math.pow(-2 * t + 2, 3) / 2)",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 4 * t ^ 3\nELSE\n  tween ← 1 - 0.5 * (2 - 2 * t) ^ 3\nEND",
            "lua": "function inOutCubic(t)\n  if t < 0.5 then\n    return 4 * t^3\n  else\n    return 1 - 0.5 * (2 - 2 * t)^3\n  end\nend",
            "javascript": "function inOutCubic(t) {\n  return (t < 0.5)\n    ? (4 * t * t * t)\n    : (1 - Math.pow(-2 * t + 2, 3) / 2);\n}",
            "csharp": "float InOutCubic(float t) {\n  return (t < 0.5f)\n    ? (4 * t * t * t)\n    : (1 - Mathf.Pow(-2 * t + 2, 3) / 2);\n}",
            "cpp": "float InOutCubic(float t) {\n  return (t < 0.5)\n    ? (4 * t * t * t)\n    : (1 - pow(-2 * t + 2, 3) / 2);\n}"
        }
    },
    {
        "name": "InQuart",
        "family": "Quart",
        "function": "t * t * t * t",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t ^ 4\nEND",
            "lua": "function inQuart(t)\n  return t^4\nend",
            "javascript": "function inQuart(t) {\n  return t * t * t * t;\n}",
            "csharp": "float InQuart(float t) {\n  return t * t * t * t;\n}",
            "cpp": "float InQuart(float t) {\n  return t * t * t * t;\n}"
        }
    },
    {
        "name": "OutQuart",
        "family": "Quart",
        "function": "1 - Math.pow(1 - t, 4)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 - (1 - t) ^ 4\nEND",
            "lua": "function outQuart(t)\n  return 1 - (1 - t)^4\nend",
            "javascript": "function outQuart(t) {\n  return 1 - Math.pow(1 - t, 4);\n}",
            "csharp": "float OutQuart(float t) {\n  return 1 - Mathf.Pow(1 - t, 4);\n}",
            "cpp": "float OutQuart(float t) {\n  return 1 - pow(1 - t, 4);\n}"
        }
    },
    {
        "name": "InOutQuart",
        "family": "Quart",
        "function": "(t < 0.5) ? (8 * t * t * t * t) : (1 - Math.pow(-2 * t + 2, 4) / 2)",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 8 * t ^ 4\nELSE\n  tween ← 1 - 0.5 * (2 - 2 * t) ^ 4\nEND",
            "lua": "function inOutQuart(t)\n  if t < 0.5 then\n    return 8 * t^4\n  else\n    return 1 - 0.5 * (2 - 2 * t)^4\n  end\nend",
            "javascript": "function inOutQuart(t) {\n  return (t < 0.5)\n    ? (8 * t * t * t * t)\n    : (1 - Math.pow(-2 * t + 2, 4) / 2);\n}",
            "csharp": "float InOutQuart(float t) {\n  return (t < 0.5f)\n    ? (8 * t * t * t * t)\n    : (1 - Mathf.Pow(-2 * t + 2, 4) / 2);\n}",
            "cpp": "float InOutQuart(float t) {\n  return (t < 0.5)\n    ? (8 * t * t * t * t)\n    : (1 - pow(-2 * t + 2, 4) / 2);\n}"
        }
    },
    {
        "name": "InQuint",
        "family": "Quint",
        "function": "t * t * t * t * t",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t ^ 5\nEND",
            "lua": "function inQuint(t)\n  return t^5\nend",
            "javascript": "function inQuint(t) {\n  return t * t * t * t * t;\n}",
            "csharp": "float InQuint(float t) {\n  return t * t * t * t * t;\n}",
            "cpp": "float InQuint(float t) {\n  return t * t * t * t * t;\n}"
        }
    },
    {
        "name": "OutQuint",
        "family": "Quint",
        "function": "1 - Math.pow(1 - t, 5)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 - (1 - t) ^ 5\nEND",
            "lua": "function outQuint(t)\n  return 1 - (1 - t)^5\nend",
            "javascript": "function outQuint(t) {\n  return 1 - Math.pow(1 - t, 5);\n}",
            "csharp": "float OutQuint(float t) {\n  return 1 - Mathf.Pow(1 - t, 5);\n}",
            "cpp": "float OutQuint(float t) {\n  return 1 - pow(1 - t, 5);\n}"
        }
    },
    {
        "name": "InOutQuint",
        "family": "Quint",
        "function": "(t < 0.5) ? (16 * t * t * t * t * t) : (1 - Math.pow(-2 * t + 2, 5) / 2)",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 16 * t ^ 5\nELSE\n  tween ← 1 - 0.5 * (2 - 2 * t) ^ 5\nEND",
            "lua": "function inOutQuint(t)\n  if t < 0.5 then\n    return 16 * t^5\n  else\n    return 1 - 0.5 * (2 - 2 * t)^5\n  end\nend",
            "javascript": "function inOutQuint(t) {\n  return (t < 0.5)\n    ? (16 * t * t * t * t * t)\n    : (1 - Math.pow(-2 * t + 2, 5) / 2);\n}",
            "csharp": "float InOutQuint(float t) {\n  return (t < 0.5f)\n    ? (16 * t * t * t * t * t)\n    : (1 - Mathf.Pow(-2 * t + 2, 5) / 2);\n}",
            "cpp": "float InOutQuint(float t) {\n  return (t < 0.5)\n    ? (16 * t * t * t * t * t)\n    : (1 - pow(-2 * t + 2, 5) / 2);\n}"
        }
    },
    {
        "name": "InExpo",
        "family": "Expo",
        "function": "(t === 0) ? 0 : Math.pow(2, 10 * (t - 1))",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE\n  tween ← 2 ^ (10 * (t - 1))\nEND",
            "lua": "function inExpo(t)\n  if t == 0 then\n    return 0\n  else\n    return math.pow(2, 10 * (t - 1))\n  end\nend",
            "javascript": "function inExpo(t) {\n  return (t === 0)\n    ? 0\n    : Math.pow(2, 10 * (t - 1));\n}",
            "csharp": "float InExpo(float t) {\n  return (t == 0)\n    ? 0\n    : Mathf.Pow(2, 10 * (t - 1));\n}",
            "cpp": "float InExpo(float t) {\n  return (t == 0)\n    ? 0\n    : pow(2, 10 * (t - 1));\n}"
        }
    },
    {
        "name": "OutExpo",
        "family": "Expo",
        "function": "(t === 1) ? 1 : 1 - Math.pow(2, -10 * t)",
        "code": {
            "pseudo": "IF t == 1 THEN\n  tween ← 1\nELSE\n  tween ← 1 - 2 ^ (-10 * t)\nEND",
            "lua": "function outExpo(t)\n  if t == 1 then\n    return 1\n  else\n    return 1 - math.pow(2, -10 * t)\n  end\nend",
            "javascript": "function outExpo(t) {\n  return (t === 1)\n    ? 1\n    : 1 - Math.pow(2, -10 * t);\n}",
            "csharp": "float OutExpo(float t) {\n  return (t == 1)\n    ? 1\n    : 1 - Mathf.Pow(2, -10 * t);\n}",
            "cpp": "float OutExpo(float t) {\n  return (t == 1)\n    ? 1\n    : 1 - pow(2, -10 * t);\n}"
        }
    },
    {
        "name": "InOutExpo",
        "family": "Expo",
        "function": "(t === 0) ? 0 : (t === 1) ? 1 : (t < 0.5) ? (Math.pow(2, 10 * (2 * t - 1)) / 2) : (1 - Math.pow(2, -10 * (2 * t - 1)) / 2)",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE IF t == 1 THEN\n  tween ← 1\nELSE IF t < 0.5 THEN\n  tween ← 0.5 * 2 ^ (10 * (2 * t - 1))\nELSE\n  tween ← 1 - 0.5 * 2 ^ (-10 * (2 * t - 1))\nEND",
            "lua": "function inOutExpo(t)\n  if t == 0 then\n    return 0\n  elseif t == 1 then\n    return 1\n  elseif t < 0.5 then\n    return math.pow(2, 10 * (2 * t - 1)) / 2\n  else\n    return 1 - math.pow(2, -10 * (2 * t - 1)) / 2\n  end\nend",
            "javascript": "function inOutExpo(t) {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return (t < 0.5)\n    ? Math.pow(2, 10 * (2 * t - 1)) / 2\n    : 1 - Math.pow(2, -10 * (2 * t - 1)) / 2;\n}",
            "csharp": "float InOutExpo(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return (t < 0.5f)\n    ? Mathf.Pow(2, 10 * (2 * t - 1)) / 2\n    : 1 - Mathf.Pow(2, -10 * (2 * t - 1)) / 2;\n}",
            "cpp": "float InOutExpo(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return (t < 0.5)\n    ? pow(2, 10 * (2 * t - 1)) / 2\n    : 1 - pow(2, -10 * (2 * t - 1)) / 2;\n}"
        }
    },
    {
        "name": "InCirc",
        "family": "Circ",
        "function": "1 - Math.sqrt(1 - t * t)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 - sqrt(1 - t^2)\nEND",
            "lua": "function inCirc(t)\n  return 1 - math.sqrt(1 - t^2)\nend",
            "javascript": "function inCirc(t) {\n  return 1 - Math.sqrt(1 - t * t);\n}",
            "csharp": "float InCirc(float t) {\n  return 1 - Mathf.Sqrt(1 - t * t);\n}",
            "cpp": "float InCirc(float t) {\n  return 1 - sqrt(1 - t * t);\n}"
        }
    },
    {
        "name": "OutCirc",
        "family": "Circ",
        "function": "Math.sqrt(1 - Math.pow(t - 1, 2))",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← sqrt(1 - (t - 1)^2)\nEND",
            "lua": "function outCirc(t)\n  return math.sqrt(1 - (t - 1)^2)\nend",
            "javascript": "function outCirc(t) {\n  return Math.sqrt(1 - Math.pow(t - 1, 2));\n}",
            "csharp": "float OutCirc(float t) {\n  return Mathf.Sqrt(1 - Mathf.Pow(t - 1, 2));\n}",
            "cpp": "float OutCirc(float t) {\n  return sqrt(1 - pow(t - 1, 2));\n}"
        }
    },
    {
        "name": "InOutCirc",
        "family": "Circ",
        "function": "(t < 0.5) ? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 0.5 * (1 - sqrt(1 - (2 * t)^2))\nELSE\n  tween ← 0.5 * (sqrt(1 - (-2 * t + 2)^2) + 1)\nEND",
            "lua": "function inOutCirc(t)\n  if t < 0.5 then\n    return (1 - math.sqrt(1 - (2 * t)^2)) / 2\n  else\n    return (math.sqrt(1 - (-2 * t + 2)^2) + 1) / 2\n  end\nend",
            "javascript": "function inOutCirc(t) {\n  return (t < 0.5)\n    ? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2\n    : (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2;\n}",
            "csharp": "float InOutCirc(float t) {\n  return (t < 0.5f)\n    ? (1 - Mathf.Sqrt(1 - Mathf.Pow(2 * t, 2))) / 2\n    : (Mathf.Sqrt(1 - Mathf.Pow(-2 * t + 2, 2)) + 1) / 2;\n}",
            "cpp": "float InOutCirc(float t) {\n  return (t < 0.5)\n    ? (1 - sqrt(1 - pow(2 * t, 2))) / 2\n    : (sqrt(1 - pow(-2 * t + 2, 2)) + 1) / 2;\n}"
        }
    },
    {
        "name": "InBack",
        "family": "Back",
        "function": "t * t * t - t * Math.sin(t * Math.PI)",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← t ^ 3 - t * sin(t * PI)\nEND",
            "lua": "function inBack(t)\n  return t^3 - t * math.sin(t * math.pi)\nend",
            "javascript": "function inBack(t) {\n  return t * t * t - t * Math.sin(t * Math.PI);\n}",
            "csharp": "float InBack(float t) {\n  return t * t * t - t * Mathf.Sin(t * Mathf.PI);\n}",
            "cpp": "float InBack(float t) {\n  return t * t * t - t * sin(t * M_PI);\n}"
        }
    },
    {
        "name": "OutBack",
        "family": "Back",
        "function": "1 + ((t - 1) * (t - 1) * (t - 1) + (t - 1) * Math.sin((t - 1) * Math.PI))",
        "code": {
            "pseudo": "IF t in [0, 1] THEN\n  tween ← 1 + ((t - 1) ^ 3 + (t - 1) * sin((t - 1) * PI))\nEND",
            "lua": "function outBack(t)\n  local x = t - 1\n  return 1 + (x^3 + x * math.sin(x * math.pi))\nend",
            "javascript": "function outBack(t) {\n  const x = t - 1;\n  return 1 + (x * x * x + x * Math.sin(x * Math.PI));\n}",
            "csharp": "float OutBack(float t) {\n  float x = t - 1;\n  return 1 + (x * x * x + x * Mathf.Sin(x * Mathf.PI));\n}",
            "cpp": "float OutBack(float t) {\n  float x = t - 1;\n  return 1 + (x * x * x + x * sin(x * M_PI));\n}"
        }
    },
    {
        "name": "InOutBack",
        "family": "Back",
        "function": "(t < 0.5) ? ((2 * t) * (2 * t) * (2 * t) - (2 * t) * Math.sin(2 * t * Math.PI)) / 2 : (1 - ((-2 * t + 2) * (-2 * t + 2) * (-2 * t + 2) - (-2 * t + 2) * Math.sin((-2 * t + 2) * Math.PI)) / 2)",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 0.5 * ((2 * t)^3 - (2 * t) * sin(2 * t * PI))\nELSE\n  tween ← 1 - 0.5 * ((-2 * t + 2)^3 - (-2 * t + 2) * sin((-2 * t + 2) * PI))\nEND",
            "lua": "function inOutBack(t)\n  if t < 0.5 then\n    local a = 2 * t\n    return (a^3 - a * math.sin(a * math.pi)) / 2\n  else\n    local a = -2 * t + 2\n    return 1 - (a^3 - a * math.sin(a * math.pi)) / 2\n  end\nend",
            "javascript": "function inOutBack(t) {\n  if (t < 0.5) {\n    const a = 2 * t;\n    return (a * a * a - a * Math.sin(a * Math.PI)) / 2;\n  } else {\n    const a = -2 * t + 2;\n    return 1 - (a * a * a - a * Math.sin(a * Math.PI)) / 2;\n  }\n}",
            "csharp": "float InOutBack(float t) {\n  if (t < 0.5f) {\n    float a = 2 * t;\n    return (a * a * a - a * Mathf.Sin(a * Mathf.PI)) / 2;\n  } else {\n    float a = -2 * t + 2;\n    return 1 - (a * a * a - a * Mathf.Sin(a * Mathf.PI)) / 2;\n  }\n}",
            "cpp": "float InOutBack(float t) {\n  if (t < 0.5) {\n    float a = 2 * t;\n    return (a * a * a - a * sin(a * M_PI)) / 2;\n  } else {\n    float a = -2 * t + 2;\n    return 1 - (a * a * a - a * sin(a * M_PI)) / 2;\n  }\n}"
        }
    },
    {
        "name": "InElastic",
        "family": "Elastic",
        "function": "(t === 0) ? 0 : (t === 1) ? 1 : -Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1.1) * 5 * Math.PI)",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE IF t == 1 THEN\n  tween ← 1\nELSE\n  tween ← -2 ^ (10 * (t - 1)) * sin((t - 1.1) * 5 * PI)\nEND",
            "lua": "function inElastic(t)\n  if t == 0 then return 0\n  elseif t == 1 then return 1\n  else\n    return -math.pow(2, 10 * (t - 1)) * math.sin((t - 1.1) * 5 * math.pi)\n  end\nend",
            "javascript": "function inElastic(t) {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return -Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1.1) * 5 * Math.PI);\n}",
            "csharp": "float InElastic(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return -Mathf.Pow(2, 10 * (t - 1)) * Mathf.Sin((t - 1.1f) * 5 * Mathf.PI);\n}",
            "cpp": "float InElastic(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return -pow(2, 10 * (t - 1)) * sin((t - 1.1) * 5 * M_PI);\n}"
        }
    },
    {
        "name": "OutElastic",
        "family": "Elastic",
        "function": "(t === 0) ? 0 : (t === 1) ? 1 : Math.pow(2, -10 * t) * Math.sin((t - 0.1) * 5 * Math.PI) + 1",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE IF t == 1 THEN\n  tween ← 1\nELSE\n  tween ← 2 ^ (-10 * t) * sin((t - 0.1) * 5 * PI) + 1\nEND",
            "lua": "function outElastic(t)\n  if t == 0 then return 0\n  elseif t == 1 then return 1\n  else\n    return math.pow(2, -10 * t) * math.sin((t - 0.1) * 5 * math.pi) + 1\n  end\nend",
            "javascript": "function outElastic(t) {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return Math.pow(2, -10 * t) * Math.sin((t - 0.1) * 5 * Math.PI) + 1;\n}",
            "csharp": "float OutElastic(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return Mathf.Pow(2, -10 * t) * Mathf.Sin((t - 0.1f) * 5 * Mathf.PI) + 1;\n}",
            "cpp": "float OutElastic(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return pow(2, -10 * t) * sin((t - 0.1) * 5 * M_PI) + 1;\n}"
        }
    },
    {
        "name": "InOutElastic",
        "family": "Elastic",
        "function": "(t < 0.5) ? (-Math.pow(2, 10 * (2 * t - 1)) * Math.sin((2 * t - 1.1) * 5 * Math.PI)) / 2 : (Math.pow(2, -10 * (2 * t - 1)) * Math.sin((2 * t - 1.1) * 5 * Math.PI)) / 2 + 1",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← -0.5 * 2 ^ (10 * (2 * t - 1)) * sin((2 * t - 1.1) * 5 * PI)\nELSE\n  tween ← 0.5 * 2 ^ (-10 * (2 * t - 1)) * sin((2 * t - 1.1) * 5 * PI) + 1\nEND",
            "lua": "function inOutElastic(t)\n  local a = 2 * t - 1\n  if t < 0.5 then\n    return -math.pow(2, 10 * a) * math.sin((a + 0.9) * 5 * math.pi) / 2\n  else\n    return math.pow(2, -10 * a) * math.sin((a + 0.9) * 5 * math.pi) / 2 + 1\n  end\nend",
            "javascript": "function inOutElastic(t) {\n  if (t < 0.5) {\n    const a = 2 * t - 1;\n    return -Math.pow(2, 10 * a) * Math.sin((a + 0.1) * 5 * Math.PI) / 2;\n  } else {\n    const a = 2 * t - 1;\n    return Math.pow(2, -10 * a) * Math.sin((a + 0.1) * 5 * Math.PI) / 2 + 1;\n  }\n}",
            "csharp": "float InOutElastic(float t) {\n  float a = 2 * t - 1;\n  if (t < 0.5f)\n    return -Mathf.Pow(2, 10 * a) * Mathf.Sin((a + 0.1f) * 5 * Mathf.PI) / 2;\n  else\n    return Mathf.Pow(2, -10 * a) * Mathf.Sin((a + 0.1f) * 5 * Mathf.PI) / 2 + 1;\n}",
            "cpp": "float InOutElastic(float t) {\n  float a = 2 * t - 1;\n  if (t < 0.5)\n    return -pow(2, 10 * a) * sin((a + 0.1) * 5 * M_PI) / 2;\n  else\n    return pow(2, -10 * a) * sin((a + 0.1) * 5 * M_PI) / 2 + 1;\n}"
        }
    },
    {
        "name": "InBounce",
        "family": "Bounce",
        "function": "(t === 0) ? 0 : (t === 1) ? 1 : Math.pow(2, 6 * (t - 1)) * Math.abs(Math.cos((t - 1) * 3.5 * Math.PI))",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE IF t == 1 THEN\n  tween ← 1\nELSE\n  tween ← 2 ^ (6 * (t - 1)) × |cos((t - 1) × 3.5 × PI)|\nEND",
            "lua": "function inBounce(t)\n  if t == 0 then return 0\n  elseif t == 1 then return 1\n  else\n    return math.pow(2, 6 * (t - 1)) * math.abs(math.cos((t - 1) * 3.5 * math.pi))\n  end\nend",
            "javascript": "function inBounce(t) {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return Math.pow(2, 6 * (t - 1)) * Math.abs(Math.cos((t - 1) * 3.5 * Math.PI));\n}",
            "csharp": "float InBounce(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return Mathf.Pow(2, 6 * (t - 1)) * Mathf.Abs(Mathf.Cos((t - 1f) * 3.5f * Mathf.PI));\n}",
            "cpp": "float InBounce(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return pow(2, 6 * (t - 1)) * fabs(cos((t - 1) * 3.5 * M_PI));\n}"
        }
    },
    {
        "name": "OutBounce",
        "family": "Bounce",
        "function": "(t === 0) ? 0 : (t === 1) ? 1 : 1 - Math.pow(2, -6 * t) * Math.abs(Math.cos(t * 3.5 * Math.PI))",
        "code": {
            "pseudo": "IF t == 0 THEN\n  tween ← 0\nELSE IF t == 1 THEN\n  tween ← 1\nELSE\n  tween ← 1 - 2 ^ (-6 × t) × |cos(t × 3.5 × PI)|\nEND",
            "lua": "function outBounce(t)\n  if t == 0 then return 0\n  elseif t == 1 then return 1\n  else\n    return 1 - math.pow(2, -6 * t) * math.abs(math.cos(t * 3.5 * math.pi))\n  end\nend",
            "javascript": "function outBounce(t) {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return 1 - Math.pow(2, -6 * t) * Math.abs(Math.cos(t * 3.5 * Math.PI));\n}",
            "csharp": "float OutBounce(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return 1 - Mathf.Pow(2, -6 * t) * Mathf.Abs(Mathf.Cos(t * 3.5f * Mathf.PI));\n}",
            "cpp": "float OutBounce(float t) {\n  if (t == 0) return 0;\n  if (t == 1) return 1;\n  return 1 - pow(2, -6 * t) * fabs(cos(t * 3.5 * M_PI));\n}"
        }
    },
    {
        "name": "InOutBounce",
        "family": "Bounce",
        "function": "(t < 0.5) ? (Math.pow(2, 6 * (2 * t - 1)) * Math.abs(Math.cos((2 * t - 1) * 3.5 * Math.PI))) / 2 : (1 - Math.pow(2, -6 * (2 * t - 1)) * Math.abs(Math.cos((2 * t - 1) * 3.5 * Math.PI))) / 2 + 0.5",
        "code": {
            "pseudo": "IF t < 0.5 THEN\n  tween ← 0.5 × 2 ^ (6 × (2t - 1)) × |cos((2t - 1) × 3.5 × PI)|\nELSE\n  tween ← 0.5 × (1 - 2 ^ (-6 × (2t - 1)) × |cos((2t - 1) × 3.5 × PI)|) + 0.5\nEND",
            "lua": "function inOutBounce(t)\n  local a = 2 * t - 1\n  if t < 0.5 then\n    return math.pow(2, 6 * a) * math.abs(math.cos(a * 3.5 * math.pi)) / 2\n  else\n    return (1 - math.pow(2, -6 * a) * math.abs(math.cos(a * 3.5 * math.pi))) / 2 + 0.5\n  end\nend",
            "javascript": "function inOutBounce(t) {\n  const a = 2 * t - 1;\n  if (t < 0.5) {\n    return Math.pow(2, 6 * a) * Math.abs(Math.cos(a * 3.5 * Math.PI)) / 2;\n  } else {\n    return (1 - Math.pow(2, -6 * a) * Math.abs(Math.cos(a * 3.5 * Math.PI))) / 2 + 0.5;\n  }\n}",
            "csharp": "float InOutBounce(float t) {\n  float a = 2 * t - 1;\n  if (t < 0.5f)\n    return Mathf.Pow(2, 6 * a) * Mathf.Abs(Mathf.Cos(a * 3.5f * Mathf.PI)) / 2;\n  else\n    return (1 - Mathf.Pow(2, -6 * a) * Mathf.Abs(Mathf.Cos(a * 3.5f * Mathf.PI))) / 2 + 0.5f;\n}",
            "cpp": "float InOutBounce(float t) {\n  float a = 2 * t - 1;\n  if (t < 0.5)\n    return pow(2, 6 * a) * fabs(cos(a * 3.5 * M_PI)) / 2;\n  else\n    return (1 - pow(2, -6 * a) * fabs(cos(a * 3.5 * M_PI))) / 2 + 0.5;\n}"
        }
    }
]